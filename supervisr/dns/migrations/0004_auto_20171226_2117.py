# -*- coding: utf-8 -*-
# Generated by Django 1.11.8 on 2017-12-26 20:17
from __future__ import unicode_literals

import django.db.models.deletion
from django.db import migrations, models


def migrate_to_rs(apps, schema_editor):
    Record = apps.get_model('supervisr_dns', 'Record')
    ResourceSet = apps.get_model('supervisr_dns', 'ResourceSet')
    RecordResource = apps.get_model('supervisr_dns', 'RecordResource')
    UserProductRelationship = apps.get_model(
        'supervisr_core', 'UserProductRelationship')
    # Load all reccords into Hash with name as key and value as array of records
    # so we can easily create resourcesets
    record_set = {}
    for rec in Record.objects.all():
        uniq = '%s, %s' % (rec.name, rec.domain.domain.name)
        if uniq not in record_set:
            record_set[uniq] = []
        record_set[uniq].append(rec)
    # Create a ResourceSet for each record
    # Create RecordResource for each old record
    for rec_pk, rec_v in record_set.items():
        rset = ResourceSet.objects.create(name=rec_pk)
        for record in rec_v:
            rr = RecordResource.objects.create(
                type=record.type,
                content=record.content,
                ttl=record.ttl,
                prio=record.prio,
                enabled=record.enabled,
            )
            # Migrate uprs to new RecordResource
            for user in record.users.all():
                UserProductRelationship.objects.create(product=rr, user=user)
                # Check if user already has access to ResourceSet
                if not UserProductRelationship.objects.filter(product=rset, user=user).exists():
                    UserProductRelationship.objects.create(
                        product=rset, user=user)


def connect_rs(apps, schema_editor):
    Zone = apps.get_model('supervisr_dns', 'Zone')
    Record = apps.get_model('supervisr_dns', 'Record')
    ResourceSet = apps.get_model('supervisr_dns', 'ResourceSet')
    UserProductRelationship = apps.get_model(
        'supervisr_core', 'UserProductRelationship')
    # Attach ResourceSets to Records
    # for rset in ResourceSet.objects.all():
    #     domain, name = rset.name.split(', ')
    #     zn = Zone.objects.get(domain_domain=domain)
    #     rec = Record.objects.create()
    for rec in Record.objects.all():
        # find fitting resourceset
        rset = ResourceSet.objects.filter(
            name='%s, %s' % (rec.name, rec.domain.domain.name))
        rec.resource_set = rset
        rec.save()


class Migration(migrations.Migration):

    dependencies = [
        ('supervisr_core', '0004_userproductrelationship_instance_name'),
        ('supervisr_dns', '0003_auto_20170815_2125'),
    ]

    operations = [
        migrations.CreateModel(
            name='RecordResource',
            fields=[
                ('product_ptr', models.OneToOneField(auto_created=True, default=None, on_delete=django.db.models.deletion.CASCADE,
                                                     parent_link=True, primary_key=True, serialize=False, to='supervisr_core.Product')),
                ('type', models.CharField(choices=[('A', 'A'), ('AAAA', 'AAAA'), ('AFSDB', 'AFSDB'), ('APL', 'APL'), ('CAA', 'CAA'), ('CDNSKEY', 'CDNSKEY'), ('CDS', 'CDS'), ('CERT', 'CERT'), ('CNAME', 'CNAME'), ('DHCID', 'DHCID'), ('DLV', 'DLV'), ('DNAME', 'DNAME'), ('DNSKEY', 'DNSKEY'), ('DS', 'DS'), ('HIP', 'HIP'), ('IPSECKEY', 'IPSECKEY'), ('KEY', 'KEY'), ('KX', 'KX'), ('LOC', 'LOC'), (
                    'MX', 'MX'), ('NAPTR', 'NAPTR'), ('NS', 'NS'), ('NSEC', 'NSEC'), ('NSEC3', 'NSEC3'), ('NSEC3PARAM', 'NSEC3PARAM'), ('OPENPGPKEY', 'OPENPGPKEY'), ('PTR', 'PTR'), ('RRSIG', 'RRSIG'), ('RP', 'RP'), ('SIG', 'SIG'), ('SOA', 'SOA'), ('SRV', 'SRV'), ('SSHFP', 'SSHFP'), ('TA', 'TA'), ('TKEY', 'TKEY'), ('TLSA', 'TLSA'), ('TSIG', 'TSIG'), ('TXT', 'TXT'), ('URI', 'URI')], max_length=10)),
                ('content', models.TextField()),
                ('ttl', models.IntegerField(default=3600)),
                ('prio', models.IntegerField(default=0)),
                ('enabled', models.BooleanField(default=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ResourceSet',
            fields=[
                ('product_ptr', models.OneToOneField(auto_created=True, default=None, on_delete=django.db.models.deletion.CASCADE,
                                                     parent_link=True, primary_key=True, serialize=False, to='supervisr_core.Product')),
                ('resource', models.ManyToManyField(
                    to='supervisr_dns.RecordResource')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.RunPython(migrate_to_rs),
        migrations.RemoveField(
            model_name='record',
            name='content',
        ),
        migrations.RemoveField(
            model_name='record',
            name='prio',
        ),
        migrations.RemoveField(
            model_name='record',
            name='ttl',
        ),
        migrations.RemoveField(
            model_name='record',
            name='type',
        ),
        migrations.AddField(
            model_name='record',
            name='resource_set',
            field=models.ForeignKey(
                default=None, on_delete=django.db.models.deletion.CASCADE, to='supervisr_dns.ResourceSet'),
            preserve_default=False,
        ),
        migrations.RunPython(connect_rs),
    ]
